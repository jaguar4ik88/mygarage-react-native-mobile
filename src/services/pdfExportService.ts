import * as Print from 'expo-print';
import { ServiceHistory, Vehicle } from '../types';

interface PdfExportOptions {
  history: ServiceHistory[];
  vehicles: Vehicle[];
  expenseTypes?: Array<{ id: number; slug: string; name: string }>;
  stats: {
    totalSpent: number;
    thisMonth: number;
    thisYear: number;
  };
  currency: string;
  language: string;
  t?: (key: string) => string;
}

class PdfExportService {
  generateHtmlTemplate(options: PdfExportOptions): string {
    const { history, vehicles, expenseTypes = [], stats, currency, language, t } = options;
    
    const formatDate = (dateString: string): string => {
      const date = new Date(dateString);
      return date.toLocaleDateString(language === 'uk' ? 'uk-UA' : language === 'en' ? 'en-US' : 'ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });
    };

    const formatCurrency = (amount: number): string => {
      const locale = language === 'uk' ? 'uk-UA' : language === 'en' ? 'en-US' : 'ru-RU';
      
      return new Intl.NumberFormat(locale, {
        style: 'currency',
        currency: currency,
      }).format(amount);
    };

    const getVehicleName = (vehicleId: number): string => {
      const vehicle = vehicles.find(v => v.id === vehicleId);
      return vehicle ? `${vehicle.year} ${vehicle.make} ${vehicle.model}` : 'Unknown Vehicle';
    };

    const getExpenseTypeName = (record: ServiceHistory): string => {
      if (!record.expense_type_id) return '-';
      const type = expenseTypes.find(et => et.id === record.expense_type_id);
      if (!type) return '-';
      
      // Ищем перевод или используем name
      const translationKey = `expenseTypes.${type.slug}`;
      if (t) {
        const translated = t(translationKey);
        return translated !== translationKey ? translated : type.name;
      }
      return type.name || '-';
    };

    // Get translations
    const getTranslation = (key: string): string => {
      if (t) {
        const translated = t(`pdfExport.${key}`);
        return translated !== `pdfExport.${key}` ? translated : key;
      }
      // Fallback translations in case t is not provided
      const fallback: Record<string, Record<string, string>> = {
        uk: {
          title: "Звіт по витратах (Expenses Report)",
          generatedOn: "Дата формування",
          totalRecords: "Всього записів",
          totalSpent: "Всього витрачено",
          thisYear: "Цього року",
          thisMonth: "Цього місяця",
          date: "Дата",
          vehicle: "Автомобіль",
          description: "Опис",
          type: "Тип",
          amount: "Сума",
          total: "Ітого:",
          generatedBy: "Сгенеровано через myGarage"
        },
        en: {
          title: "Expenses Report",
          generatedOn: "Generated on",
          totalRecords: "Total records",
          totalSpent: "Total spent",
          thisYear: "This year",
          thisMonth: "This month",
          date: "Date",
          vehicle: "Vehicle",
          description: "Description",
          type: "Type",
          amount: "Amount",
          total: "Total:",
          generatedBy: "Generated by myGarage"
        },
        ru: {
          title: "Отчет по расходам (Expenses Report)",
          generatedOn: "Дата формирования",
          totalRecords: "Всего записей",
          totalSpent: "Всего потрачено",
          thisYear: "В этом году",
          thisMonth: "В этом месяце",
          date: "Дата",
          vehicle: "Автомобиль",
          description: "Описание",
          type: "Тип",
          amount: "Сумма",
          total: "Итого:",
          generatedBy: "Сгенерировано через myGarage"
        }
      };
      return fallback[language]?.[key] || key;
    };

    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              color: #333;
            }
            .header {
              border-bottom: 3px solid #007AFF;
              padding-bottom: 20px;
              margin-bottom: 30px;
            }
            .header h1 {
              color: #007AFF;
              margin: 0;
              font-size: 28px;
            }
            .header p {
              color: #666;
              margin: 5px 0;
              font-size: 14px;
            }
            .stats {
              display: flex;
              justify-content: space-around;
              margin-bottom: 30px;
              padding: 20px;
              background-color: #f5f5f5;
              border-radius: 10px;
            }
            .stat-item {
              text-align: center;
            }
            .stat-value {
              font-size: 24px;
              font-weight: bold;
              color: #007AFF;
              margin-bottom: 5px;
            }
            .stat-label {
              color: #666;
              font-size: 14px;
            }
            .table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 20px;
            }
            .table th {
              background-color: #007AFF;
              color: white;
              padding: 12px;
              text-align: left;
              font-size: 14px;
            }
            .table td {
              padding: 10px 12px;
              border-bottom: 1px solid #ddd;
              font-size: 13px;
            }
            .table tr:nth-child(even) {
              background-color: #f9f9f9;
            }
            .total-row {
              font-weight: bold;
              background-color: #e8f4f8 !important;
            }
            .date {
              color: #666;
              font-size: 12px;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #ddd;
              text-align: center;
              color: #666;
              font-size: 12px;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${getTranslation('title')}</h1>
            <p>${getTranslation('generatedOn')}: ${formatDate(new Date().toISOString())}</p>
            <p>${getTranslation('totalRecords')}: ${history.length}</p>
          </div>
          
          <div class="stats">
            <div class="stat-item">
              <div class="stat-value">${formatCurrency(stats.totalSpent)}</div>
              <div class="stat-label">${getTranslation('totalSpent')}</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">${formatCurrency(stats.thisYear)}</div>
              <div class="stat-label">${getTranslation('thisYear')}</div>
            </div>
            <div class="stat-item">
              <div class="stat-value">${formatCurrency(stats.thisMonth)}</div>
              <div class="stat-label">${getTranslation('thisMonth')}</div>
            </div>
          </div>
          
          <table class="table">
            <thead>
              <tr>
                <th>${getTranslation('date')}</th>
                <th>${getTranslation('vehicle')}</th>
                <th>${getTranslation('description')}</th>
                <th>${getTranslation('type')}</th>
                <th>${getTranslation('amount')}</th>
              </tr>
            </thead>
            <tbody>
              ${history.map(record => `
                <tr>
                  <td class="date">${formatDate(record.service_date)}</td>
                  <td>${getVehicleName(record.vehicle_id)}</td>
                  <td>${record.description || '-'}</td>
                  <td>${getExpenseTypeName(record)}</td>
                  <td>${formatCurrency(record.cost)}</td>
                </tr>
              `).join('')}
              <tr class="total-row">
                <td colspan="4"><strong>${getTranslation('total')}</strong></td>
                <td><strong>${formatCurrency(stats.totalSpent)}</strong></td>
              </tr>
            </tbody>
          </table>
          
          <div class="footer">
            <p>${getTranslation('generatedBy')}</p>
          </div>
        </body>
      </html>
    `;
    
    return html;
  }

  async exportToPdf(options: PdfExportOptions): Promise<string> {
    try {
      const html = this.generateHtmlTemplate(options);
      
      const { uri } = await Print.printToFileAsync({
        html,
        base64: false,
      });
      
      console.log('PDF exported to:', uri);
      return uri;
    } catch (error) {
      console.error('Error exporting to PDF:', error);
      throw error;
    }
  }
}

export default new PdfExportService();

