import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import ApiService from '../services/api';
import BiometricService from '../services/biometricService';
import Analytics from '../services/analyticsService';
import { User } from '../types';

interface AuthState {
  isGuest: boolean;
  isAuthenticated: boolean;
  user: User | null;
  isLoading: boolean;
}

interface AuthContextType extends AuthState {
  login: (email: string, password: string) => Promise<void>;
  loginWithGoogle: (idToken: string) => Promise<void>;
  loginWithApple: (identityToken: string, user?: string) => Promise<void>;
  register: (email: string, password: string, name: string) => Promise<void>;
  logout: () => Promise<void>;
  continueAsGuest: () => Promise<void>;
  promptToLogin: () => void;
  checkAutoLogin: () => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
  onLoginPrompt?: () => void;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children, onLoginPrompt }) => {
  const [state, setState] = useState<AuthState>({
    isGuest: false,
    isAuthenticated: false,
    user: null,
    isLoading: true,
  });

  useEffect(() => {
    initAuth();
  }, []);

  const initAuth = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –≥–æ—Å—Ç—è
      const guestMode = await AsyncStorage.getItem('guest_mode');
      if (guestMode === 'true') {
        setState({
          isGuest: true,
          isAuthenticated: false,
          user: null,
          isLoading: false,
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
      const token = await AsyncStorage.getItem('auth_token');
      if (token) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          const userData = await AsyncStorage.getItem('user_data');
          const user = userData ? JSON.parse(userData) : null;
          
          setState({
            isGuest: false,
            isAuthenticated: true,
            user,
            isLoading: false,
          });
        } catch (error) {
          console.error('Error loading user data:', error);
          setState({
            isGuest: false,
            isAuthenticated: false,
            user: null,
            isLoading: false,
          });
        }
      } else {
        setState({
          isGuest: false,
          isAuthenticated: false,
          user: null,
          isLoading: false,
        });
      }
    } catch (error) {
      console.error('Error initializing auth:', error);
      setState({
        isGuest: false,
        isAuthenticated: false,
        user: null,
        isLoading: false,
      });
    }
  };

  const login = async (email: string, password: string) => {
    try {
      const response = await ApiService.login(email, password);
      
      if (response.token) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        await AsyncStorage.setItem('auth_token', response.token);
        await ApiService.updateToken();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (response.user) {
          await AsyncStorage.setItem('user_data', JSON.stringify(response.user));
        }
        
        // –û—á–∏—â–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –±—ã–ª
        await AsyncStorage.removeItem('guest_mode');
        await clearGuestData();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
        await AsyncStorage.setItem('last_login_email', email);
        await AsyncStorage.setItem('last_login_password', password);
        
        setState({
          isGuest: false,
          isAuthenticated: true,
          user: response.user,
          isLoading: false,
        });
        
        await Analytics.track('auth_login_success', { method: 'email' });
      }
    } catch (error) {
      await Analytics.track('auth_login_failed', { method: 'email' });
      throw error;
    }
  };

  const loginWithGoogle = async (idToken: string) => {
    try {
      const response = await ApiService.loginWithGoogle(idToken);
      
      if (response.token) {
        await AsyncStorage.setItem('auth_token', response.token);
        await ApiService.updateToken();
        
        if (response.user) {
          await AsyncStorage.setItem('user_data', JSON.stringify(response.user));
        }
        
        await AsyncStorage.removeItem('guest_mode');
        await clearGuestData();
        
        setState({
          isGuest: false,
          isAuthenticated: true,
          user: response.user,
          isLoading: false,
        });
        
        await Analytics.track('auth_login_success', { method: 'google' });
      }
    } catch (error) {
      await Analytics.track('auth_login_failed', { method: 'google' });
      throw error;
    }
  };

  const loginWithApple = async (identityToken: string, user?: string) => {
    try {
      const response = await ApiService.loginWithApple(identityToken, user);
      
      if (response.token) {
        await AsyncStorage.setItem('auth_token', response.token);
        await ApiService.updateToken();
        
        if (response.user) {
          await AsyncStorage.setItem('user_data', JSON.stringify(response.user));
        }
        
        await AsyncStorage.removeItem('guest_mode');
        await clearGuestData();
        
        setState({
          isGuest: false,
          isAuthenticated: true,
          user: response.user,
          isLoading: false,
        });
        
        await Analytics.track('auth_login_success', { method: 'apple' });
      }
    } catch (error) {
      await Analytics.track('auth_login_failed', { method: 'apple' });
      throw error;
    }
  };

  const register = async (email: string, password: string, name: string) => {
    try {
      const response = await ApiService.register(email, password, name);
      
      if (response.token) {
        await AsyncStorage.setItem('auth_token', response.token);
        await ApiService.updateToken();
        
        if (response.user) {
          await AsyncStorage.setItem('user_data', JSON.stringify(response.user));
        }
        
        await AsyncStorage.removeItem('guest_mode');
        await clearGuestData();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∏
        await AsyncStorage.setItem('last_login_email', email);
        await AsyncStorage.setItem('last_login_password', password);
        
        setState({
          isGuest: false,
          isAuthenticated: true,
          user: response.user,
          isLoading: false,
        });
        
        await Analytics.track('auth_register_success');
      }
    } catch (error) {
      await Analytics.track('auth_register_failed');
      throw error;
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem('auth_token');
      await AsyncStorage.removeItem('user_data');
      await AsyncStorage.removeItem('guest_mode');
      await AsyncStorage.removeItem('current_vehicle_id');
      
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ API Service
      await ApiService.updateToken();
      
      setState({
        isGuest: false,
        isAuthenticated: false,
        user: null,
        isLoading: false,
      });
      
      await Analytics.track('auth_logout');
    } catch (error) {
      console.error('Error during logout:', error);
    }
  };

  const continueAsGuest = async () => {
    try {
      await AsyncStorage.setItem('guest_mode', 'true');
      
      setState({
        isGuest: true,
        isAuthenticated: false,
        user: null,
        isLoading: false,
      });
      
      await Analytics.track('auth_continue_as_guest');
    } catch (error) {
      console.error('Error setting guest mode:', error);
    }
  };

  const promptToLogin = () => {
    console.log('üîî promptToLogin called, onLoginPrompt exists:', !!onLoginPrompt);
    Analytics.track('login_prompt_shown');
    if (onLoginPrompt) {
      console.log('üîî Calling onLoginPrompt callback');
      onLoginPrompt();
    } else {
      console.warn('‚ö†Ô∏è onLoginPrompt callback is not defined!');
    }
  };

  const checkAutoLogin = async (): Promise<boolean> => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
      const token = await AsyncStorage.getItem('auth_token');
      if (token) {
        // –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –ë–∏–æ–º–µ—Ç—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏–∑ AuthScreen
        console.log('User already has token, skipping auto-login');
        return true;
      }

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∏–æ–º–µ—Ç—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –≤—ã–±—Ä–∞—Ç—å: –≤–æ–π—Ç–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å
      console.log('No token found, user needs to choose login method');
      return false;
    } catch (error) {
      console.error('Error during auto login:', error);
      return false;
    }
  };

  const clearGuestData = async () => {
    try {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –≥–æ—Å—Ç–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ AsyncStorage
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—á–∏—â–∞—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ, —Ç—Ä–∞—Ç—ã –∏ —Ç.–¥.
      await AsyncStorage.removeItem('guest_vehicles');
      await AsyncStorage.removeItem('guest_expenses');
      await AsyncStorage.removeItem('guest_reminders');
      console.log('Guest data cleared');
    } catch (error) {
      console.error('Error clearing guest data:', error);
    }
  };

  const value: AuthContextType = {
    ...state,
    login,
    loginWithGoogle,
    loginWithApple,
    register,
    logout,
    continueAsGuest,
    promptToLogin,
    checkAutoLogin,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export default AuthContext;

